from helper_functions import *
import math
#-----------------------FILL IN THE FOLDER WHERE YOUR IMAGE EXISTS--------------------------
datafolder = "C:/Users/satya/Desktop/assgn1code/images/"
imgpath = datafolder + "1.jpg" 
#----------------------------------------STARTER CODE----------------------------------------
# Convert the color image to grayscale and returns the grayscale pixels 
pixel_values = read_colorimg(imgpath)
plt.imshow(pixel_values,cmap=plt.get_cmap('gray'),vmin=0,vmax=255)
#pixel_values = [[0,0,0,0,0],[0,1,2,3,0],[0,4,5,6,0],[0,0,0,0,0]]
#print(pixel_values)

# The returned pixel values INCLUDE 2 boundary rows and 2 boundary colns. Therefore,
numb_rows = len(pixel_values) - 2
numb_colns = len(pixel_values[0]) - 2
#
#----------------------------------------WRITE YOUR CODE HERE----------------------------------------
# create a data structure to store updated pixel information
# temp=[0] * numb_colns
# new_pixel_values=[temp] * numb_rows

new_pixel_values= [[0 for x in range(numb_colns)] for y in range(numb_rows)]

# Define the 3 x 3 mask 
mask = ((-1,-1,-1), (-1,8,-1), (-1,-1,-1))

# implement a function to slice a part from the image as a 2d list 
def get_slice_2d_list(pixels,a,b):
    # getting a slice of neighbour pixels
    slice = [x[b-1:b+2] for x in pixels[a-1:a+2]]
    return slice

# implement a function to flatten a 2d list or 2d tuple
def flatten(n_pixels):
    flat_arr=[i for j in n_pixels for i in j]
    return flat_arr

mask1 = flatten(mask)
print(mask1)

newvals = []
# for each of the pixel values, excluding the boundary values
for i in range(1,len(pixel_values)-1):
    rowe = []
    for j in range(1,len(pixel_values[0])-1):
    # create little local 3*3 box using list slicing
        neighbour_pixels1 = get_slice_2d_list(pixel_values,i,j)
        neighbour_pixels = flatten (neighbour_pixels1)
        # apply the mask
        mult_result = map(lambda x,y:x*y,neighbour_pixels,mask1)
        # sum all the multiplied values and set the new pixel value
        ael = 0
        for val in mult_result:
            ael = ael+val
        #print(ael)
        #print(list(mult_result))
        #print("\n i value:", i-1)
        #print("\n j value:", j-1)
        new_pixel_values[i-1][j-1] = ael
        rowe.append(ael)
        del ael,mult_result,neighbour_pixels,neighbour_pixels1
        newvals.append(rowe)

#----------------------------------------END YOUR CODE HERE----------------------------------------
# Verify your result
verify_result(pixel_values, new_pixel_values, mask)
# View the original image and the edges of the image
view_images(imgpath, new_pixel_values)